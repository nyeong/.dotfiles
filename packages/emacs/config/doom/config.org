#+TITLE: My Emacs Config

* Initalize

#+begin_src elisp :tangle config.el
;;; config.el -*- lexical-binding: t; -*-

(setq user-full-name "An Nyeong"
      user-mail-address "me@annyeong.me")

;; secrets.el 파일 로드 (API 키 등 민감한 정보)
(let ((secret-file (expand-file-name "secrets.el" doom-private-dir)))
  (when (file-exists-p secret-file)
    (load secret-file)))
#+end_src

* 외관

#+begin_src elisp :tangle config.el
(setq doom-theme 'doom-one-light)
(setq display-line-numbers-type 'visual)
#+end_src

** 한국어

#+begin_src elisp :tangle config.el
(set-language-environment "Korean")
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq-default buffer-file-coding-system 'utf-8)
(if (fboundp 'w32-set-system-coding-system)
    (w32-set-system-coding-system 'utf-8))
;; 날짜 표시를 영어로한다. org mode에서 time stamp 날짜에 영향을 준다.
(setq system-time-locale "C")
(setenv "LANG" "en_US.UTF-8")
(setenv "LC_ALL" "en_US.UTF-8")
#+end_src

** 글꼴

|  1245678 |   |
|----------+---|
| one둘삼넷 |   |
|          |   |

#+begin_src elisp :tangle config.el
(setq doom-font (font-spec :family "Liga SFMono Nerd Font" :size 14 :weight 'semi-light))
;;       doom-variable-pitch-font (font-spec :family "Liga SFMono Nerd Font" :size 14 :weight 'semi-light)
;;       doom-serif-font (font-spec :family "Liga SFMono Nerd Font" :size 14 :weight 'semi-light))

(set-face-attribute 'default nil :family "Liga SFMono Nerd Font")
(set-fontset-font "fontset-default" '(#x1100 . #xffdc) (font-spec :family "Monoplex KR Nerd"))
(set-fontset-font "fontset-default" '(#xe0bc . #xf66e) (font-spec :family "Monoplex KR Nerd"))
(set-fontset-font "fontset-default" 'hangul (font-spec :family "Monoplex KR Nerd"))
(set-face-attribute 'default nil :height 140)
(set-default 'line-spacing 3)

;; (setq face-font-rescale-alist
;;       '((".*hiragino.*" . 1.2)
;;         ("Monoplex KR Wide Nerd" . 1.0)))
#+end_src

* Org

#+begin_src elisp :tangle config.el
(setq org-directory "~/Nextcloud/hanassig/")
(after! org-roam
  (setq org-roam-directory (file-truename "~/Nextcloud/hanassig")
        epa-pinentry-mode 'loopback))
#+end_src

** 템플릿
:PROPERTIES:
:LAST_MODIFIED: [2025-03-17 Mon]
:END:
#+begin_src elisp :tangle config.el
;; 기본 템플릿
(setq org-roam-capture-templates
  ;; "d" :: 키
  ;; "default" :: 이름
  `(("d" "default" plain
    ;; 노트에 삽입될 내용
    "%?"
    ;; 새 파일일 경우
    :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        ,(concat
                          ":PROPERTIES:\n"
                          ":CREATED_AT: <%<%Y-%m-%d %a>>\n"
                          ":LAST_MODIFIED: <%<%Y-%m-%d %a>>\n"
                          ":END:\n"
                          "#+TITLE: ${title}\n\n"))
    ;; ensures that the full file will be displayed when captured.
    :unnarrowed t)))

;; 프로젝트 템플릿
(defvar nyeong/project-template
  `("p" "Project" plain
    "%?"
    :target (file+head "projects/${slug}.org"
                       ,(concat
                         ":PROPERTIES:\n"
                         ":CREATED_AT: <%<%Y-%m-%d %a>>\n"
                         ":LAST_MODIFIED: <%<%Y-%m-%d %a>>\n"
                         ":END:\n\n"
                         "#+title: ${title}\n"
                         "#+DESCRIPTION: \n"))
    :unnarrowed t)
  "프로젝트를 위한 org-roam 캡처 템플릿.
- ${title}: 문서 제목")

;; 영역 템플릿
(defvar nyeong/area-template
  `("a" "Area" plain
    "%?"
    :target (file+head "areas/${slug}.org"
                       ,(concat
                         ":PROPERTIES:\n"
                         ":CREATED_AT: <%<%Y-%m-%d %a>>\n"
                         ":LAST_MODIFIED: <%<%Y-%m-%d %a>>\n"
                         ":END:\n"
                         "#+TITLE: ${title}\n"
                         "#+DESCRIPTION: \n"))
    :unnarrowed t)
  "영역(Area)을 위한 org-roam 캡처 템플릿.
- ${title}: 문서 제목")

;; 노트 템플릿
(defvar nyeong/note-template
  `("n" "Note" plain
    "%?"
    :target (file+head "notes/${slug}.org"
                       ,(concat
                         ":PROPERTIES:\n"
                         ":CREATED_AT: <%<%Y-%m-%d %a>>\n"
                         ":LAST_MODIFIED: <%<%Y-%m-%d %a>>\n"
                         ":END:\n"
                         "#+TITLE: ${title}\n"
                         "#+DESCRIPTION: \n"))
    :unnarrowed t)
  "개념 정리를 위한 org-roam 캡처 템플릿.
- ${title}: 문서 제목")

;; inbox 캡처 템플릿
(defvar nyeong/inbox-template
  `("i" "Inbox" plain
    "* %U\n\n%?"
    :target (file+head "inbox/capture.org"
                       ,(concat
                         ":PROPERTIES:\n"
                         ":CREATED_AT: <%<%Y-%m-%d %a>>\n"
                         ":LAST_MODIFIED: <%<%Y-%m-%d %a>>\n"
                         ":END:\n"
                         "#+TITLE: 캡처 박스\n"))
    :unnarrowed t)
  "캡처")

;; 레퍼런스 템플릿
(defvar nyeong/reference-template
  `("r" "Reference" plain "%?"
    :target (file+head "references/${citekey}.org"
                       ,(concat
                         ":PROPERTIES:\n"
                         ":ROAM_REFS: [cite:@${citekey}] ${url}\n"
                         ":CREATED_AT: [%<%Y-%m-%d %a>]\n"
                         ":LAST_MODIFIED: [%<%Y-%m-%d %a>]\n"
                         ":END:\n"
                         "#+TITLE: ${title}\n"))
    :immediate-finish t
    :unnarrowed t)
  "참고 문헌을 위한 org-roam 캡처 템플릿.
- ${citekey} : 인용키
- ${title}: 문서 제목
- ${url}: 웹 주소 (있는 경우)")

(after! org-roam
  (add-to-list 'org-roam-capture-templates nyeong/project-template)
  (add-to-list 'org-roam-capture-templates nyeong/area-template)
  (add-to-list 'org-roam-capture-templates nyeong/note-template)
  (add-to-list 'org-roam-capture-templates nyeong/reference-template)
  (add-to-list 'org-roam-capture-templates nyeong/inbox-template))
#+end_src

** 수정 시간 자동 업데이트

#+begin_src elisp :tangle config.el
(defun nyeong/update-last-modified ()
  "Update the LAST_MODIFIED property in the current buffer."
  (when (derived-mode-p 'org-mode)
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward ":LAST_MODIFIED:" nil t)
        (org-set-property "LAST_MODIFIED"
                         (format-time-string "<%Y-%m-%d %a>"))))))

(add-hook 'before-save-hook #'nyeong/update-last-modified)
#+end_src

** Biblio

기본적인 설정은 아래와 같음

#+begin_src elisp :tangle config.el
(after! org
  (setq org-agenda-files '("~/Nextcloud/hanassig/journals/weekly"
                          "~/Nextcloud/hanassig/projects"
                          "~/Nextcloud/hanassig/areas")
        org-cite-export-processors '((t csl))
        org-cite-csl-styles-dir "~/Nextcloud/hanassig/csl-styles"
        org-cite-csl-default-style "ieee"
        org-cite-global-bibliography '("~/Nextcloud/hanassig/references.bib")))
(setq! citar-bibliography '("~/Nextcloud/hanassig/references.bib"))
#+end_src

위의 =references.bib=에서 하나씩 가져와서 템플릿으로 만드는 함수. [[https://jethrokuan.github.io/org-roam-guide/][How I Take Notes with Org-roam]] 참고하였고, API가 바뀌어서 수정하였다:

#+begin_src elisp :tangle config.el
(defun nyeong/format-authors (author-string)
  "저자 문자열을 '성1 & 성2' 또는 '성1 et al.' 형식으로 변환합니다."
  (if (not author-string)
      "Unknown"
    (let ((authors (split-string author-string " and ")))
      (cond
       ;; 단일 저자
       ((= (length authors) 1)
        (if (string-match "\\(.*\\), \\(.*\\)" (car authors))
            (match-string 1 (car authors))  ;; 성만 사용
          (car authors)))

       ;; 두 명의 저자
       ((= (length authors) 2)
        (concat (if (string-match "\\(.*\\), \\(.*\\)" (car authors))
                    (match-string 1 (car authors))
                  (car authors))
                " & "
                (if (string-match "\\(.*\\), \\(.*\\)" (cadr authors))
                    (match-string 1 (cadr authors))
                  (cadr authors))))

       ;; 세 명 이상의 저자
       (t
        (concat (if (string-match "\\(.*\\), \\(.*\\)" (car authors))
                    (match-string 1 (car authors))
                  (car authors))
                " et al."))))))

(defun nyeong/get-entry-value (entry key &optional default)
  "BibTeX entry에서 key에 해당하는 값을 가져오고 없으면 default 반환"
  (let ((value (citar-format--entry (format "${%s}" key) entry)))
    (if (or (null value) (string-empty-p value))
        default
      value)))

(defun nyeong/create-reference-from-cite (citekey)
  (interactive (list (citar-select-ref)))
  (let* ((entry (citar-get-entry citekey))
         (raw-title (nyeong/get-entry-value entry "title" "Untitled"))
         (author (nyeong/format-authors (nyeong/get-entry-value entry "author" nil)))
         (year (nyeong/get-entry-value entry "year" "n.d."))
         (title (format "%s (%s, %s)" raw-title author year))
         (url (or (nyeong/get-entry-value entry "url" nil)
                  (nyeong/get-entry-value entry "howpublished" nil)
                  "")))
    (org-roam-capture- :templates (list nyeong/reference-template)
                       :info (list :citekey citekey
                                   :title title
                                   :url url)
                       :node (org-roam-node-create :title title)
                       :props (list :finalize 'find-file))))
#+end_src

** 주간 일기 추가

#+begin_src elisp :tangle config.el
(defun nyeong/ensure-weekly-journal ()
  "Ensure the current week's journal file exists and has today's section.
Creates the weekly file if it doesn't exist with sections for all days of the week."
  (interactive)
  (let* ((today (current-time))
         (day-name (format-time-string "%a" today))
         (date-str (format-time-string "[%Y-%m-%d %a]" today))
         (week-year (format-time-string "%Y" today))
         (week-num (format-time-string "%V" today))
         (week-id (format "%s-W%s" week-year week-num))
         ;; Use the existing org-directory variable
         (journal-dir (expand-file-name "journals/weekly" org-directory))
         (journal-file (expand-file-name (concat week-id ".org") journal-dir)))

    ;; Create journals/weekly directory if it doesn't exist
    (unless (file-directory-p journal-dir)
      (make-directory journal-dir t))

    ;; Create weekly file if it doesn't exist
    (unless (file-exists-p journal-file)
      (with-temp-file journal-file
        (let* ((current-dow (string-to-number (format-time-string "%u" today))) ; 1-7, Monday is 1
               (monday (time-subtract today (seconds-to-time (* 86400 (1- current-dow)))))
               (days-content ""))

          ;; Generate sections for all 7 days of the week
          (dotimes (i 7)
            (let* ((day-time (time-add monday (seconds-to-time (* 86400 i))))
                   (day-str (format-time-string "[%Y-%m-%d %a]" day-time)))
              (setq days-content (concat days-content
                                         "\n* <" (substring day-str 1 -1) ">\n"
                                         "** 한 일\n"
                                         "- \n"
                                         "\n"
                                         "** 메모\n"
                                         "- \n\n"))))

          (insert (concat
                   ":PROPERTIES:\n"
                   ":CREATED_AT: <" (substring date-str 1 -1) ">\n"
                   ":LAST_MODIFIED: <" (substring date-str 1 -1) ">\n"
                   ":END:\n"
                   "#+TITLE: " week-id "\n"
                   "#+FILETAGS: :weekly:\n"
                   "#+DATE: <" (format-time-string "%Y-%m-%d" monday) ">\n\n"
                   "* 이번주 목표 [0/0]\n"
                   "\n"
                   "* 주간 회고\n"
                   "** 성취한 것\n"
                   "- \n"
                   "\n"
                   "** 배운 것\n"
                   "- \n"
                   "\n"
                   "** 다음 주 계획\n"
                   "- \n"
                   days-content)))))

    ;; Return the buffer of the journal file
    (find-file-noselect journal-file)))

;; Function to open today's journal
(defun nyeong/open-todays-journal ()
  "Open the current week's journal and navigate to today's section."
  (interactive)
  (let* ((buf (nyeong/ensure-weekly-journal))
         (today-str (format-time-string "[%Y-%m-%d %a]" (current-time))))
    (switch-to-buffer buf)
    (goto-char (point-min))
    (if (re-search-forward (concat "^\\* <" (substring today-str 1 -1) ">") nil t)
        (progn
          ;; Move to the first item in "한 일" section
          (re-search-forward "^\\*\\* 한 일" nil t)
          (forward-line 1)
          ;; If there's just a bullet point, position cursor after it
          (when (looking-at "- $")
            (end-of-line))
          (recenter-top-bottom 4)) ; Show some context above
      (message "Could not find today's section"))))

;; Add to after-init-hook to ensure journal exists when Emacs starts
(add-hook 'after-init-hook #'nyeong/ensure-weekly-journal)
#+end_src
** babel

*** tangle 전 디렉토리 자동 생성

org-babel-tangle이 경로로 지정된 경우, 디렉토리가 없으면 자동 생성

#+begin_src elisp :tangle config.el
(defun nyeong/org-babel-tangle-ensure-directory (file)
  "Ensure the directory for FILE exists."
  (let ((dir (file-name-directory file)))
    (unless (file-directory-p dir)
      (make-directory dir t))))

(add-hook 'org-babel-pre-tangle-hook
          (lambda ()
            (let ((tangle-file (org-entry-get nil "TANGLE")))
              (when (and tangle-file (string-match-p "/" tangle-file))
                (nyeong/org-babel-tangle-ensure-directory tangle-file)))))
#+end_src

** hanassig Git 자동 동기화

#+begin_src elisp :tangle config.el
(defvar nyeong/git-sync-pull-timer nil
  "Timer for periodic git pull.")

(defvar nyeong/git-sync-push-timer nil
  "Timer for periodic git push.")

(defvar nyeong/last-git-push-time nil
  "Timestamp of the last git push.")

(defvar nyeong/git-changes-pending nil
  "Flag indicating whether there are uncommitted changes.")

(defun nyeong/in-org-directory-p ()
  "Return t if current buffer's file is in org-directory."
  (when-let ((file-name (buffer-file-name)))
    (string-prefix-p (expand-file-name org-directory)
                    (expand-file-name file-name))))

(defun nyeong/git-sync-pull ()
  "Pull changes from remote repository for org-directory asynchronously."
  (when (and (nyeong/in-org-directory-p)
             (not (active-minibuffer-window))
             (not (current-message))  ; 메시지 영역이 사용중이지 않을 때만
             (not isearch-mode))      ; 검색 중이 아닐 때만
    (let ((default-directory org-directory)
          (process-connection-type nil)) ; 프로세스 버퍼 생성 방지
      (start-process "git-pull" nil "git" "pull"))))

(defun nyeong/git-sync-push ()
  "Commit and push changes if there are any pending changes asynchronously."
  (when (and nyeong/git-changes-pending
             (not (active-minibuffer-window))
             (not (current-message))  ; 메시지 영역이 사용중이지 않을 때만
             (not isearch-mode))      ; 검색 중이 아닐 때만
    (let ((default-directory org-directory)
          (process-connection-type nil)) ; 프로세스 버퍼 생성 방지
      (when (string-match-p "Changes not staged for commit"
                           (shell-command-to-string "git status"))
        (start-process "git-add" nil "git" "add" ".")
        (start-process "git-commit" nil "git" "commit" "-m"
                      (concat "Auto commit: " (format-time-string "%Y-%m-%d %H:%M:%S")))
        (start-process "git-push" nil "git" "push")
        (setq nyeong/git-changes-pending nil)
        (setq nyeong/last-git-push-time (current-time))))))

(defun nyeong/mark-git-changes ()
  "Mark that there are pending changes to be committed."
  (when (nyeong/in-org-directory-p)
    (setq nyeong/git-changes-pending t)))

;; Start periodic pull timer (every 5 minutes)
(unless nyeong/git-sync-pull-timer
  (setq nyeong/git-sync-pull-timer
        (run-with-timer 0 300 #'nyeong/git-sync-pull)))

;; Start periodic push timer (every 30 minutes)
(unless nyeong/git-sync-push-timer
  (setq nyeong/git-sync-push-timer
        (run-with-timer 0 1800 #'nyeong/git-sync-push)))

;; Add save hook to mark changes
(add-hook 'after-save-hook #'nyeong/mark-git-changes)
#+end_src

* Aider

#+begin_src elisp :tangle config.el
(use-package aider
  :config
  (setq aider-args '("--model" "sonnet")))
  (setenv "ANTHROPIC_API_KEY" ANTHROPIC_API_KEY)
#+end_src

* 언어별 설정

** Nix
#+begin_src elisp :tangle config.el
(after! nix-mode
  (setq lsp-nix-nil-formatter ["nixfmt"]))
#+end_src
